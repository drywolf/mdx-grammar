
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="EN_US"><head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <title>Leaves</title><link rel="stylesheet" href="global.css" type="text/css"><link rel="stylesheet" href="document.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.69.1"><link rel="start" href="copyrite.htm" title="Oracle Essbase Technical Reference"><link rel="up" href="ch07s09.htm" title="MDX Function Reference"><link rel="prev" href="mdx_lead.htm" title="Lead"><link rel="next" href="mdx_left.htm" title="Left"><script src="normal.js" language="javascript" type="text/javascript"></script><script language="javascript" type="text/javascript"><!--
var prevPage = 'mdx_lead.htm';
var nextPage = 'mdx_left.htm';
var tocLinkId = 'mdx_leaves';
// --></script></head><body onload="javascript:loadPage();" onclick="javascript:clearToc();"><noscript>If you see this message, your browser either has disabled or does not support JavaScript. To use the full features of this help system, such as searching and the table of contents, your browser must have JavaScript support enabled. If your browser supports JavaScript, it provides settings that enable or disable JavaScript. When JavaScript is disabled, you can view only the content of the help topic, which follows this message.</noscript><div class="function" lang="EN-US">

<h1 class="title" style="clear: both"><a name="leaves_techref_proj_maxl_dml_funcs"></a>Leaves</h1>


<p>Returns the set of level 0 (leaf) members that contribute to the value
of the specified member.</p>
<p>The Leaves function compactly describes large sets of members or tuples
while avoiding pre-expansion of the set before retrieval. Because large sets
tend to be very sparse, only a few members contribute to the input member
(have non #Missing values) and are returned. As a result, Leaves consumes
less memory resources than the equivalent nonempty Descendants function call,
allowing for better scalability, especially in concurrent user environments.</p>
<p>Members with #MISSING values are not included in the return set.</p>
<p>When <span class="italic">member</span> is on the primary hierarchy,
the return set is the set of descendants at level 0 that are nonempty.</p>
<p>The set returned by Leaves is the set of nonempty descendants at level
0, with a few differences. For example, when <span class="italic">member</span> is
from an alternate hierarchy, the return set contains all primary, stored,
level 0 members whose values are aggregated into <span class="italic">member</span>'s
value. These contributing members may be either:</p>
<div class="itemizedlist"><ul type="disc"><li><p>Direct descendants of <span class="italic">member</span> along
the alternate hierarchy</p></li><li><p>Members that contribute value to a direct descendant of <span class="italic">member</span> by means of a shared member</p></li></ul></div>
<p>In most cases, the Leaves function does not pre-expand the set prior
to retrieval. Thus it requires less memory resources than the Descendants
function, allowing for more scalability in dealing with large sets, especially
in a high-concurrency user environment. Large sets tend to be very sparse;
therefore, very few members are returned given the current point of view as
defined by the MDX current member stack.</p>
<p>For example, a healthcare provider may have a database containing Doctor
and Geography dimensions. While there may be hundreds of thousands, even millions,
of doctors, only a fraction have data associated with them for a given geographic
location. Leaves is ideal for queries where the set is large but is sparse
at a given point of view:</p>
<pre class="programlisting">Select {[Copayments]} ON COLUMNS
CrossJoin(Leaves ([Doctors]), Leaves([Santa Clara County]) ON ROWS</pre>
<p>The Leaves function is beneficial for queries on large dimensions.</p>
<p>In some cases, Leaves does require pre-expansion of sets, limiting the
memory savings. Pre-expansion of sets likely will occur when the input member
to Leaves is:</p>
<div class="itemizedlist"><ul type="disc"><li><p>On an Accounts dimension</p></li><li><p>On a Time dimension</p></li><li><p>On a dimension with fewer than 10,000 members</p></li></ul></div>




<p class="func_subhead">Syntax</p>
<pre class="programlisting">Leaves ( <span class="italic">member</span> )</pre>

<div class="FunctionParams"><table border="1" cellpadding="2" summary="This table describes the parameters for the Leaves function"><thead><tr><th id="hd-d0e105431-col1">Parameter</th><th id="hd-d0e105431-col2">Description</th></tr></thead><tbody>
<tr>
<td headers="hd-d0e105431-col1"><p>member</p></td>
<td headers="hd-d0e105431-col2">
<p>The member for which contributing leaf members are sought</p>
</td>
</tr>
</tbody></table></div>
<p class="func_subhead">Notes</p>
<div class="itemizedlist"><ul type="disc"><li><p>Using Leaves() with a non aggregate-storage input member returns
an error.</p></li><li><p>Leaves() is supported only for members in stored hierarchies.
Using Leaves with a member in a dynamic hierarchy returns an error.</p></li><li><p>If you modify the return set of Leaves with a metadata function
such as Head, Tail, or Subset, then the query is not optimized. For example,
querying for half of the Leaves set reduces performance to about the same
as for the nonempty Descendants function call.</p></li></ul></div>

<p class="func_subhead">Example</p>
<p>The following examples are based on the Asosamp.Sample database.</p>
<p class="bridgehead"><a name="d0e105452"></a>Example 1 (Leaves)</p>
<p>The following query returns the Units (items per package) for all level
0 Personal Electronics products for which the Units data is not #MISSING:</p>
<pre class="programlisting">SELECT
{Units} ON COLUMNS,
Leaves([Personal Electronics]) ON ROWS
FROM [Asosamp.Sample]</pre>
<p>Because Leaves returns nonempty, level 0 descendants, the above query
is identical to the following query:</p>
<pre class="programlisting">SELECT
{Units} ON COLUMNS,
NON EMPTY Descendants([Personal Electronics], [Products].Levels(0), SELF) ON ROWS
FROM [Asosamp.Sample]</pre>
<p>These queries return the following grid:</p>
<div class="informaltable"><table border="1"><colgroup><col><col></colgroup><tbody><tr><td>&nbsp;</td><td>Items Per Package</td></tr><tr><td>Digital Cameras</td><td>3041</td></tr><tr><td>Camcorders</td><td>3830</td></tr><tr><td>Photo Printers</td><td>6002</td></tr><tr><td>Memory</td><td>23599</td></tr><tr><td>Other Accessories</td><td>117230</td></tr><tr><td>Boomboxes</td><td>10380</td></tr><tr><td>Radios</td><td>20009</td></tr></tbody></table></div>
<p>[Handhelds] was omitted from the result set because it has a value of
#MISSING for the measure Units.</p>
<p class="bridgehead"><a name="d0e105518"></a>Example 2 (Leaves)</p>
<p>For this example, a third hierarchy called [Small Items] was added to
the Products dimension.</p>
<div><img src="images/hier_smallitems.gif"></div>
<p>The following query</p>
<pre class="programlisting">SELECT
{Units} ON COLUMNS,
Leaves ([Small Items]) ON ROWS
FROM [Asosamp.Sample]</pre>
<p>Returns the the following grid:</p>
<div class="informaltable"><table border="1"><colgroup><col><col></colgroup><tbody><tr><td>&nbsp;</td><td>Items Per Package</td></tr><tr><td>Digital Cameras</td><td>3041</td></tr><tr><td>Camcorders</td><td>3830</td></tr><tr><td>Memory</td><td>23599</td></tr><tr><td>Other Accessories</td><td>117230</td></tr></tbody></table></div>
<p>In addition to the primary members [Digital Cameras] and [Camcorders],
Leaves also returned the primary members [Memory] and [Other Accessories],
because these level-0 members contributed to [Small Items] via [Handhelds/PDAs].</p>

</div></body></html>