mdx_statement returns [MdxObject value] : mdx_statement_single EOF ;
mdx_statement_single returns [MdxStatement value] : ( select_statement | update_statement );
update_statement returns [MdxUpdateStatement value] : UPDATE ( CUBE )? c= cube_specification SET dest= expression_property '=' source= expression_or_xor ( 'USE_EQUAL_ALLOCATION' | 'USE_EQUAL_INCREMENT' | 'USE_WEIGHTED_ALLOCATION' ( BY w1= weight_value_expression )? 'USE_WEIGHTED_INCREMENT' ( BY w2= weight_value_expression )? )? ;
weight_value_expression returns [MdxExpression value] : expression_property ;
condition returns [MdxExpression value] : expression_property ;
select_statement returns [MdxSelectStatement value] : ( WITH ( with_clause_single )+ )? select_statement_subcube ( ( CELL )? PROPERTIES c1= cell_property ( ',' c2= cell_property )* )? ;
select_statement_subcube returns [MdxSelectStatement value] : SELECT ( '*' | a1= axis_specification ( ',' a2= axis_specification )* )? FROM c= cube_specification ( WHERE t= condition )? ;
with_clause_single returns [MdxWithClauseItem value] : ( ( ( CALCULATED )? MEMBER member_name AS | CELL CALCULATION FOR e3= expression AS ) e2= expression ( ',' p1= property_definition )* | SET set_name AS e2= expression );
member_name returns [string value] : compound_id ;
property_definition returns [MdxCalcProperty value] : identifier '=' expression_or_xor ;
set_name returns [string value] : compound_id ;
compound_id returns [string value] : id= identifier ( '.' id2= identifier )* ;
axis_specification returns [MdxAxis value] : ( NON EMPTY )? expression ( ( DIMENSION )? PROPERTIES p1= property ( ',' p2= property )* )? ON an= axis_name ;
axis_name returns [string value] : ( identifier | INTEGER );
property returns [MdxExpression value] : compound_id ;
cube_specification returns [MdxObject value] : ( cube_name | ( NON VISUAL )? '(' select_statement_subcube ')' );
cube_name returns [string value] : ( compound_id | RANET_EXPRESSION );
cell_property returns [string value] : ( CELL_ORDINAL | VALUE | FORMATTED_VALUE | provider_specific_cell_property );
provider_specific_cell_property returns [string value] : identifier ;
expression returns [MdxExpression value] : v1= expression_or_xor ;
expression_or_xor returns [MdxExpression value] : t1= expression_and ( ( XOR | OR ) t2= expression_and )* ;
expression_and returns [MdxExpression value] : t1= expression_compare ( AND t2= expression_compare )* ;
expression_compare returns [MdxExpression value] : t1= expression_add ( ( '=' | '<>' | '<' | '>' | '<=' | '>=' ) t2= expression_add )* ;
expression_add returns [MdxExpression value] : t1= expression_mult ( ( '+' | '-' ) t2= expression_mult )* ;
expression_mult returns [MdxExpression value] : f1= expression_power ( (op1= '/' | op2= '*' ) f2= expression_power )* ;
expression_power returns [MdxExpression value] : f1= expression_unary ( '^' f2= expression_unary )* ;
expression_unary returns [MdxExpression value] : ( '-' e1= expression_range_is | '+' e2= expression_range_is | NOT t1= expression_range_is | e3= expression_range_is );
expression_range_is returns [MdxExpression value] : e1= expression_property ( ':' e2= expression_property | IS e3= expression_property )? ;
expression_property returns [MdxExpression value] : e1= expression_simple ( '.' (id1= unquoted_identifier | '&' id2= quoted_identifier ( '&' id21= quoted_identifier )* | id3= quoted_identifier | f1= expression_function ) )* ;
expression_simple returns [MdxExpression value] : ( expression_function | '(' expressions_list ')' | '{' ( expressions_list )? '}' | expression_case | STRING | INTEGER | FLOAT | identifier | RANET_EXPRESSION );
expressions_list returns [List<MdxExpression> value] : e1= expression ( ',' e2= expression )* ;
expression_function returns [MdxFunctionExpression value] : id1= identifier ( '!' id2= identifier )* '(' ( expressions_list )? ')' ;
expression_case returns [MdxCaseExpression value] : CASE (ve1= expression )? (w1= when_clause (w2= when_clause )* )? ( ELSE ve2= expression )? END ;
when_clause returns [MdxWhenClause value] : WHEN e1= expression THEN e2= expression ;
identifier returns [string value] : ( unquoted_identifier | quoted_identifier );
unquoted_identifier returns [string value] : ( ID | keyword );
quoted_identifier returns [string value] : QUOTED_ID ;
keyword returns [string value] : ( DIMENSION | PROPERTIES );
