mdx_statement : mdx_statement_single EOF ;
mdx_statement_single : ( select_statement | update_statement );
update_statement : UPDATE ( CUBE )? cube_specification SET expression_property '=' expression_or_xor ( 'USE_EQUAL_ALLOCATION' | 'USE_EQUAL_INCREMENT' | 'USE_WEIGHTED_ALLOCATION' ( BY weight_value_expression )? 'USE_WEIGHTED_INCREMENT' ( BY weight_value_expression )? )? ;
weight_value_expression : expression_property ;
condition : expression_property ;
select_statement : ( WITH ( with_clause_single )+ )? select_statement_subcube ( ( CELL )? PROPERTIES cell_property ( ',' cell_property )* )? ;
select_statement_subcube : SELECT ( '*' | axis_specification ( ',' axis_specification )* )? FROM cube_specification ( WHERE condition )? ;
with_clause_single : ( ( ( CALCULATED )? MEMBER member_name AS | CELL CALCULATION FOR expression AS ) expression ( ',' property_definition )* | SET set_name AS expression );
member_name : compound_id ;
property_definition : identifier '=' expression_or_xor ;
set_name : compound_id ;
compound_id : identifier ( '.' identifier )* ;
axis_specification : ( NON EMPTY )? expression ( ( DIMENSION )? PROPERTIES property ( ',' property )* )? ON axis_name ;
axis_name : ( identifier | INTEGER );
property : compound_id ;
cube_specification : ( cube_name | ( NON VISUAL )? '(' select_statement_subcube ')' );
cube_name : ( compound_id | RANET_EXPRESSION );
cell_property : ( CELL_ORDINAL | VALUE | FORMATTED_VALUE | provider_specific_cell_property );
provider_specific_cell_property : identifier ;
expression : expression_or_xor ;
expression_or_xor : expression_and ( ( XOR | OR ) expression_and )* ;
expression_and : expression_compare ( AND expression_compare )* ;
expression_compare : expression_add ( ( '=' | '<>' | '<' | '>' | '<=' | '>=' ) expression_add )* ;
expression_add : expression_mult ( ( '+' | '-' ) expression_mult )* ;
expression_mult : expression_power ( ( '/' | '*' ) expression_power )* ;
expression_power : expression_unary ( '^' expression_unary )* ;
expression_unary : ( '-' expression_range_is | '+' expression_range_is | NOT expression_range_is | expression_range_is );
expression_range_is : expression_property ( ':' expression_property | IS expression_property )? ;
expression_property : expression_simple ( '.' ( unquoted_identifier | '&' quoted_identifier ( '&' quoted_identifier )* | quoted_identifier | expression_function ) )* ;
expression_simple : ( expression_function | '(' expressions_list ')' | '{' ( expressions_list )? '}' | expression_case | STRING | INTEGER | FLOAT | identifier | RANET_EXPRESSION );
expressions_list : expression ( ',' expression )* ;
expression_function : identifier ( '!' identifier )* '(' ( expressions_list )? ')' ;
expression_case : CASE ( expression )? ( when_clause ( when_clause )* )? ( ELSE expression )? END ;
when_clause : WHEN expression THEN expression ;
identifier : ( unquoted_identifier | quoted_identifier );
unquoted_identifier : ( ID | keyword );
quoted_identifier : QUOTED_ID ;
keyword : ( DIMENSION | PROPERTIES );
